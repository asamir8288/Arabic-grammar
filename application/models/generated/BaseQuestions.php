<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Questions', 'default');

/**
 * BaseQuestions
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $assessment_id
 * @property string $question
 * @property integer $is_active
 * @property integer $deleted
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property integer $type_id
 * @property integer $difficulty_level
 * @property Assessments $Assessments
 * @property DifficultyLevels $DifficultyLevels
 * @property QuestionTypes $QuestionTypes
 * @property Doctrine_Collection $QuestionAnswers
 * @property Doctrine_Collection $UserAssessmentAnswers
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseQuestions extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('questions');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('assessment_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('question', 'string', 1000, array(
             'type' => 'string',
             'length' => 1000,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('deleted', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('updated_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('type_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('difficulty_level', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Assessments', array(
             'local' => 'assessment_id',
             'foreign' => 'id'));

        $this->hasOne('DifficultyLevels', array(
             'local' => 'difficulty_level',
             'foreign' => 'id'));

        $this->hasOne('QuestionTypes', array(
             'local' => 'type_id',
             'foreign' => 'id'));

        $this->hasMany('QuestionAnswers', array(
             'local' => 'id',
             'foreign' => 'question_id'));

        $this->hasMany('UserAssessmentAnswers', array(
             'local' => 'id',
             'foreign' => 'questions_id'));
    }
}